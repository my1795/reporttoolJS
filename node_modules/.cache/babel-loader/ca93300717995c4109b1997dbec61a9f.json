{"ast":null,"code":"\"use strict\";\n\nvar os = require('os'),\n    exec = require('child_process').exec,\n    async = require('async'); //////////////////////////////////////////\n// helpers\n\n\nfunction trim_exec(cmd, cb) {\n  exec(cmd, function (err, out) {\n    if (out && out.toString() != '') cb(null, out.toString().trim());else cb(err);\n  });\n}\n\nfunction determine_nic_type(str) {\n  return str.match(/Ethernet/) ? 'Wired' : str.match(/Wi-?Fi|AirPort/i) ? 'Wireless' : str.match(/FireWire/) ? 'FireWire' : str.match(/Thunderbolt/) ? 'Thunderbolt' : 'Other';\n} //////////////////////////////////////////\n// exports\n\n\nexports.get_active_network_interface_name = function (cb) {\n  var cmd = \"netstat -rn | grep UG | awk '{print $6}'\";\n  exec(cmd, function (err, stdout) {\n    if (err) return cb(err);\n    var raw = stdout.toString().trim().split('\\n');\n    if (raw.length === 0 || raw === ['']) return cb(new Error('No active network interface found.'));\n    cb(null, raw[0]);\n  });\n};\n/* unused\n\nexports.interface_type_for = function(nic_name, cb) {\n  exec('networksetup -listnetworkserviceorder | grep ' + nic_name, function(err, out) {\n    if (err) return cb(err);\n\n    var type = out.toString().match(/ethernet|lan/i) ? 'Wired' : 'Wireless';\n    cb(null, type);\n  })\n};\n*/\n\n\nexports.mac_address_for = function (nic_name, cb) {\n  var cmd = \"networksetup -getmacaddress \" + nic_name + \" | awk '{print $3}'\";\n  trim_exec(cmd, cb);\n};\n\nexports.gateway_ip_for = function (nic_name, cb) {\n  var cmd = \"ipconfig getoption \" + nic_name + \" router\";\n  trim_exec(cmd, cb);\n};\n\nexports.netmask_for = function (nic_name, cb) {\n  var cmd = \"ipconfig getoption \" + nic_name + \" subnet_mask\";\n  trim_exec(cmd, cb);\n};\n\nexports.get_network_interfaces_list = function (cb) {\n  var count = 0,\n      list = [],\n      nics = os.networkInterfaces();\n\n  function append_data(obj) {\n    async.parallel([function (cb) {\n      exports.gateway_ip_for(obj.name, cb);\n    }, function (cb) {\n      exports.netmask_for(obj.name, cb);\n    }], function (err, results) {\n      if (results[0]) obj.gateway_ip = results[0];\n      if (results[1]) obj.netmask = results[1];\n      list.push(obj);\n      --count || cb(null, list);\n    });\n  }\n\n  exec('networksetup -listallhardwareports', function (err, out) {\n    if (err) return cb(err);\n    var blocks = out.toString().split(/Hardware/).slice(1);\n    count = blocks.length;\n    blocks.forEach(function (block) {\n      var parts = block.match(/Port: (.+)/),\n          mac = block.match(/Address: ([A-Fa-f0-9:-]+)/),\n          name = block.match(/Device: (\\w+)/);\n      if (!parts || !mac || !name) return --count;\n      var obj = {},\n          port = parts[1];\n      obj.name = name[1]; // obj.desc  = port;\n\n      obj.type = determine_nic_type(port);\n      obj.ip_address = null;\n      obj.mac_address = mac[1];\n      (nics[obj.name] || []).forEach(function (type) {\n        if (type.family == 'IPv4') {\n          obj.ip_address = type.address;\n        }\n      });\n      append_data(obj);\n    });\n    if (count == 0) cb(new Error('No interfaces found.'));\n  });\n};","map":null,"metadata":{},"sourceType":"script"}