{"ast":null,"code":"\"use strict\";\n\nvar os = require('os'),\n    exec = require('child_process').exec,\n    async = require('async');\n\nfunction trim_exec(cmd, cb) {\n  exec(cmd, function (err, out) {\n    if (out && out.toString() != '') cb(null, out.toString().trim());else cb(err);\n  });\n} // If no wifi, then there is no error but cbed get's a null in second param.\n\n\nexports.get_active_network_interface_name = function (cb) {\n  var cmd = \"netstat -rn | grep UG | awk '{print $NF}'\";\n  exec(cmd, function (err, stdout) {\n    if (err) return cb(err);\n    var raw = stdout.toString().trim().split('\\n');\n    if (raw.length === 0 || raw === ['']) return cb(new Error('No active network interface found.'));\n    cb(null, raw[0]);\n  });\n};\n\nexports.interface_type_for = function (nic_name, cb) {\n  exec('cat /proc/net/wireless | grep ' + nic_name, function (err, out) {\n    return cb(null, err ? 'Wired' : 'Wireless');\n  });\n};\n\nexports.mac_address_for = function (nic_name, cb) {\n  var cmd = 'cat /sys/class/net/' + nic_name + '/address';\n  trim_exec(cmd, cb);\n};\n\nexports.gateway_ip_for = function (nic_name, cb) {\n  trim_exec(\"ip r | grep \" + nic_name + \" | grep default | cut -d ' ' -f 3 | head -n1\", cb);\n};\n\nexports.netmask_for = function (nic_name, cb) {\n  var cmd = \"ifconfig \" + nic_name + \" 2> /dev/null | egrep 'netmask|Mask:' | awk '{print $4}' | sed 's/Mask://'\";\n  trim_exec(cmd, cb);\n};\n\nexports.get_network_interfaces_list = function (cb) {\n  var count = 0,\n      list = [],\n      nics = os.networkInterfaces();\n\n  function append_data(obj) {\n    async.parallel([function (cb) {\n      exports.mac_address_for(obj.name, cb);\n    }, function (cb) {\n      exports.gateway_ip_for(obj.name, cb);\n    }, function (cb) {\n      exports.netmask_for(obj.name, cb);\n    }, function (cb) {\n      exports.interface_type_for(obj.name, cb);\n    }], function (err, results) {\n      if (results[0]) obj.mac_address = results[0];\n      if (results[1]) obj.gateway_ip = results[1];\n      if (results[2]) obj.netmask = results[2];\n      if (results[3]) obj.type = results[3];\n      list.push(obj);\n      --count || cb(null, list);\n    });\n  }\n\n  for (var key in nics) {\n    if (key != 'lo0' && key != 'lo' && !key.match(/^tun/)) {\n      count++;\n      var obj = {\n        name: key\n      };\n      nics[key].forEach(function (type) {\n        if (type.family == 'IPv4') {\n          obj.ip_address = type.address;\n        }\n      });\n      append_data(obj);\n    }\n  }\n\n  if (count == 0) cb(new Error('No interfaces found.'));\n};","map":null,"metadata":{},"sourceType":"script"}