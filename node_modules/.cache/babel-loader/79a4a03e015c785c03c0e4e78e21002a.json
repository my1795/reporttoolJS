{"ast":null,"code":"\"use strict\";\n\nvar wmic = require('wmic'),\n    exec = require('child_process').exec,\n    os = require('os');\n\nfunction get_wmic_ip_value(what, nic_name, cb) {\n  exports.mac_address_for(nic_name, function (err, mac) {\n    if (err || !mac) return cb(err || new Error('No MAC Address found.'));\n    wmic.get_value('nicconfig', what, 'MACAddress = \\'' + mac + '\\'', function (err, out) {\n      if (err) return cb(err);\n      cb(null, out.split(',')[0].replace(/[^0-9\\.]/g, ''));\n    });\n  });\n}\n\nexports.get_active_network_interface_name = function (cb) {\n  wmic.get_value('nic', 'NetConnectionID', 'NetConnectionStatus = 2', cb);\n};\n\nexports.netmask_for = function (nic_name, cb) {\n  get_wmic_ip_value('IPSubnet', nic_name, cb);\n};\n\nexports.gateway_ip_for = function (nic_name, cb) {\n  get_wmic_ip_value('DefaultIPGateway', nic_name, cb);\n};\n\nexports.mac_address_for = function (nic_name, cb) {\n  var cond = 'NetConnectionID = \\'' + nic_name + '\\'';\n  wmic.get_value('nic', 'MACAddress', cond, cb);\n};\n\nexports.get_network_interfaces_list = function (callback) {\n  var count,\n      list = [],\n      node_nics = os.networkInterfaces();\n\n  function done() {\n    --count || callback(null, list);\n  }\n\n  function set_gateway(obj) {\n    exports.gateway_ip_for(obj.name, function (err, res) {\n      obj.gateway_ip = res && res != '' ? res : null;\n      done();\n    });\n  }\n\n  function set_netmask(obj) {\n    exports.netmask_for(obj.name, function (err, res) {\n      obj.netmask = res && res != '' ? res : null;\n    });\n  }\n\n  wmic.get_list('nic', function (err, nics) {\n    if (err) return callback(err);\n    count = nics.length;\n    nics.forEach(function (nic) {\n      if (nic.Name && nic.NetConnectionID != '' && nic.MACAddress != '') {\n        var obj = {\n          name: nic.NetConnectionID,\n          // description: nic.Name,\n          mac_address: nic.MACAddress,\n          ip_address: nic.IPAddress,\n          vendor: nic.Manufacturer,\n          model: nic.Description,\n          type: nic.Name.match(/wi-?fi|wireless/i) ? 'Wireless' : 'Wired'\n        };\n        var node_nic = node_nics[obj.name] || [];\n        node_nic.forEach(function (type) {\n          if (type.family == 'IPv4') {\n            obj.ip_address = type.address;\n          }\n        });\n        list.push(obj);\n        set_netmask(obj);\n        set_gateway(obj);\n      } else {\n        done();\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}