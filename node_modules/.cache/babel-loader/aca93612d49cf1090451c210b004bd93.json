{"ast":null,"code":"//////////////////////////////////////////\n// Defines mappings between content-type\n// and the appropriate parsers.\n//////////////////////////////////////////\nvar Transform = require('stream').Transform;\n\nfunction parserFactory(name, fn) {\n  function parser() {\n    var chunks = [],\n        stream = new Transform({\n      objectMode: true\n    }); // Buffer all our data\n\n    stream._transform = function (chunk, encoding, done) {\n      chunks.push(chunk);\n      done();\n    }; // And call the parser when all is there.\n\n\n    stream._flush = function (done) {\n      var self = this,\n          data = Buffer.concat(chunks);\n\n      try {\n        fn(data, function (err, result) {\n          if (err) throw err;\n          self.push(result);\n        });\n      } catch (err) {\n        self.push(data); // just pass the original data\n      } finally {\n        done();\n      }\n    };\n\n    return stream;\n  }\n\n  return {\n    fn: parser,\n    name: name\n  };\n}\n\nvar json = parserFactory('json', function (buffer, cb) {\n  var err, data;\n\n  try {\n    data = JSON.parse(buffer);\n  } catch (e) {\n    err = e;\n  }\n\n  cb(err, data);\n});\nmodule.exports['application/json'] = json;\nmodule.exports['text/javascript'] = json;\n\ntry {\n  var xml2js = require('xml2js'); // xml2js.Parser.parseString() has the exact same function signature\n  // as our ParseStream expects, so we can reuse this.\n\n\n  var xml = parserFactory('xml', new xml2js.Parser({\n    explicitRoot: true,\n    explicitArray: false\n  }).parseString, true);\n  module.exports['text/xml'] = xml;\n  module.exports['application/xml'] = xml;\n  module.exports['application/rdf+xml'] = xml;\n  module.exports['application/rss+xml'] = xml;\n  module.exports['application/atom+xml'] = xml;\n} catch (e) {\n  /* xml2js not found */\n}","map":null,"metadata":{},"sourceType":"script"}