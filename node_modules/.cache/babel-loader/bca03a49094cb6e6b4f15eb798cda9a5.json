{"ast":null,"code":"\"use strict\";\n\nvar needle = require('needle'),\n    os_functions = require('./' + process.platform); // var ip_regex = /((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})/;\n\n\nvar ip_regex = /(\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b)/;\nvar public_ip_urls = ['http://checkip.dyndns.org', 'http://wtfismyip.com/text', 'http://ipecho.net/plain', 'http://ifconfig.me/ip'];\n\nfunction is_ip_address(str) {\n  return ip_regex.test(str);\n}\n\n;\n\nfunction nic_by_name(name, cb) {\n  os_functions.get_network_interfaces_list(function (err, list) {\n    if (err) return cb(err);\n    var nics = list.filter(function (nic) {\n      return nic.name === name;\n    });\n    if (nics.length > 0) cb(null, nics[0]);else cb(new Error('No network interface named ' + name));\n  });\n}\n\n;\n\nexports.get_public_ip = function (options, cb) {\n  if (typeof options == 'function') {\n    // no options passed\n    cb = options;\n    options = {};\n  }\n\n  var urls = options.urls || public_ip_urls;\n\n  function get(i) {\n    var url = urls[i];\n    if (!url) return cb(new Error('Unable to fetch IP address.'));\n    needle.get(url, function (err, resp) {\n      var body = resp && resp.body.toString();\n\n      if (body && body.match(ip_regex)) {\n        return cb(null, body.match(ip_regex)[1]);\n      }\n\n      get(i + 1);\n    });\n  }\n\n  ;\n  get(0);\n};\n\nexports.get_private_ip = function (cb) {\n  os_functions.get_network_interfaces_list(function (err, list) {\n    if (err || !list) return cb(err || new Error('No network interfaces found.'));\n    os_functions.get_active_network_interface_name(function (err, active_nic) {\n      if (err) return cb(err);\n      var ips = list.filter(function (nic) {\n        if (is_ip_address(nic.ip_address)) return active_nic ? active_nic == nic.name : true;\n      });\n      if (ips.length > 0) cb(null, ips[0].ip_address);else cb(new Error('No private IPs found (' + list.length + ' interfaces)'));\n    });\n  });\n};\n\nexports.get_gateway_ip = function (cb) {\n  os_functions.get_active_network_interface_name(function (err, nic_name) {\n    if (err || nic_name.trim() == '') return cb(err || new Error('No active network interface found.'));\n    os_functions.gateway_ip_for(nic_name, function (err, out) {\n      if (err || !out || out.toString() == '') return cb(err || new Error('No gateway IP assigned to ' + nic_name));\n      cb(null, out.toString().trim());\n    });\n  });\n};\n\nexports.get_active_interface = function (cb) {\n  os_functions.get_active_network_interface_name(function (err, nic_name) {\n    if (err || !nic_name) return cb(err || new Error(\"No active interfaces detected.\"));\n    nic_by_name(nic_name, function (err, nic) {\n      if (err) return cb(err);\n      os_functions.netmask_for(nic_name, function (err, netmask) {\n        if (!err && netmask) nic.netmask = netmask.trim();\n        os_functions.gateway_ip_for(nic_name, function (err, ip) {\n          if (!err && ip) nic.gateway_ip = ip.toString().trim();\n          cb(null, nic);\n        });\n      });\n    });\n  });\n};\n\nexports.get_interfaces_list = os_functions.get_network_interfaces_list;\nexports.mac_address_for = os_functions.mac_address_for;\nexports.gateway_ip_for = os_functions.gateway_ip_for;","map":null,"metadata":{},"sourceType":"script"}