{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar defaultGateway = require('default-gateway');\n\nvar ipaddr = require('ipaddr.js');\n\nfunction findIp(gateway) {\n  var interfaces = os.networkInterfaces();\n  var gatewayIp = ipaddr.parse(gateway);\n  var ip; // Look for the matching interface in all local interfaces\n\n  Object.keys(interfaces).some(function (name) {\n    return interfaces[name].some(function (addr) {\n      var prefix = ipaddr.parse(addr.netmask).prefixLengthFromSubnetMask();\n      var net = ipaddr.parseCIDR(\"\".concat(addr.address, \"/\").concat(prefix));\n\n      if (net[0] && net[0].kind() === gatewayIp.kind() && gatewayIp.match(net)) {\n        ip = net[0].toString();\n      }\n\n      return Boolean(ip);\n    });\n  });\n  return ip;\n}\n\nfunction promise(family) {\n  return defaultGateway[family]().then(function (result) {\n    return findIp(result.gateway) || null;\n  }).catch(function () {\n    return null;\n  });\n}\n\nfunction sync(family) {\n  try {\n    var result = defaultGateway[family].sync();\n    return findIp(result.gateway) || null;\n  } catch (error) {\n    return null;\n  }\n}\n\nvar internalIp = {};\n\ninternalIp.v6 = function () {\n  return promise('v6');\n};\n\ninternalIp.v4 = function () {\n  return promise('v4');\n};\n\ninternalIp.v6.sync = function () {\n  return sync('v6');\n};\n\ninternalIp.v4.sync = function () {\n  return sync('v4');\n};\n\nmodule.exports = internalIp; // TODO: Remove this for the next major release\n\nmodule.exports.default = internalIp;","map":null,"metadata":{},"sourceType":"script"}